C++ code
========
Η βασικές κλάσεις είναι οι Graph, Vertex και Εdge στο αρχείο Graph.h

Η Graph Αποτελείται απο 3 βασικά containers:
1) nodes_container: περιέχει όλο το δίκτυο φορτωμένο στη μνήμη σε μορφή γράφου
2) norm_n_container: έχει normalized την αρίθμηση τών κόμβων στο διάστημα [0,total size κόμβων)
3) landmarks_holder: θα περιέχει τα 16 ορόσημα που θα υπολογίσετε. Εφόσον θα υπολογίσετε ορόσημα με 2 διαφορετικούς αλγορίθμους
	θα πρέπει να υπάρχουν 2 τέτοιες δομές. Αυτό μπορεί να γίνει είτε με 2 ίδιες δομές αλλα με διαφορετικά
	ονόματα είτε σαν 2Darray/vector, δηλ. vector<vector<node_t>> landmarks_holder;

Η Vertex περιέχει τις εξής πληροφορίες:
1) για τους ίδιους τους κόμβους, latitude or longitude,
2) in_edges,out_edges: με ποιους κόμβους συνδέεται καθένας απο αυτούς στη μορφή map<node_t,Edge>, 
	όπου το πρωτο όρισμα είναι ο κόμβος με τον οποίο συνδέεται και
	και το δευετερο πληροφορίες για την ακμή, πχ. κόστος για να το διανύσεις.
	Η δομή in_edges αναφέρεται στις ακμές που έχουν φορά προς τον κομβο Vertex που μελετάμε
 	ενώ η out_edges που απομακρύνονται
3) dist_from_lmrk,dist_to_lmrk: αυτές τις δομές θα τις χρησιμοποιήσετε για να υπολογίσετε το κόστος απο/προς
	κάθε ορόσημο για κάθε κόμβο Vertex. Και εδώ θα χρειαστείται 2 απο την κάθε δομή.

Το αρχειο Astar.h και Astar.cpp περιεχουν τον υπολογισμο οροσημων στην κλαση avoid() και εκτελεση του A* στην κλαση run().
Την κλαση run() θα την πειραξετε ωστε ο Astar να τρεχει με τα δικα σας οροσημα.

Το config.ini file πρεπει να βρίσκεται στο ίδιο φάκελο με το εκτελέσιμο αρχείο LandmarkRouting
Στο αρχείο αυτό δηλώνουμε τα credentials για να συνδεθούμε στη βάση καθώς και τη δημιουργία ενός συνεκτικού δικτύου,
ώστε να υπολογιστούν σωστά τα ορόσημα. Strongly connected graph σημαίνει ότι απο οποιοδήποτε κόμβο του δικτύου μας 
μπορούμε να πάμε σε οποιοδήποτε άλλο μεσω τουλάχιστον μιας διαδρομής.

Στη main.cpp υπάρχει παράδειγμα να συνδεθεί κάποιος στη βάση, να δημιουργήσει ένα SCC δίκτυο και να το φορτώσει στη μνήμη.
Επισης υπολογισμου 16 οροσημων με τον αλγοριθμο Avoid καθως και εκτελεσης του A*.
Απο τη μεταβλητή 'Graph g' έχετε πρόσβαση στο γράφο γενικά, δηλ. κόμβους που έχουν φορτωθεί στη μνήμη, συνδέσεις μεταξύ τους, κόστη (μήκος ακμής) κοκ.

Build
=====
cmake -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles" -H. -Bbuild 
	#την πρώτη φορά θα βγάλει error και ότι δεν βρήκε την postgres. Απλα ξανατρέξτε την παραπάνω εντολη.
cd build/
make
./LandmarkRouting
